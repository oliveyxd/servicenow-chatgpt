<?xml version="1.0" encoding="UTF-8"?><record_update table="x_snc_reactor_component">
    <x_snc_reactor_component action="INSERT_OR_UPDATE">
        <content_css/>
        <dependencies>9191395fdbd21510f359c191159619ef,acf063451b1469905b76777d8b4bcbb2</dependencies>
        <description>A react component that takes source code and asks ChatGPT to perform a code review.</description>
        <jsx>false</jsx>
        <name>ChatGPTCodeReview</name>
        <role>controller</role>
        <script><![CDATA[class ChatGPTCodeReview extends ReactorComponent
{
	constructor(props)
	{
		super(props);
		this.state =
			{
				mode: 'start'
			};
		//this.onClick = this.onClick.bind(this);
	}

	componentDidMount()
	{
	}

	componentWillUnmount()
	{
	}

	onClick()
	{
		/*
		this.setState( {clicked: true} );
		if (typeof this.props.callbackOnClick == 'function')
		{
			this.props.callbackOnClick();
		}
		else if (this.props.text != '')
		{
			DoModalMessage('New Reactor component',this.props.text);
		}
		else
		{
			DoModalMessage('New Reactor component','The button was clicked!');
		}
		*/
	}

	render()
	{
		
		var strTable = this.props.table;
		var strSysId = this.props.id;
		
		var aComponentsChat = [];
		var aComponentsCode = [];
		switch (this.state.mode)
		{
			case 'start':
			default:
				ServerRequest('x_snc_chat_gpt.ChatGPTClientAPI','CodeReview',
					{
						table: strTable,
						id: strSysId
					},
					this.onServerRequestCodeReview);
				ServerRequest('x_snc_chat_gpt.ChatGPTClientAPI','GetCodeForCodeReview',
					{
						table: strTable,
						id: strSysId
					},
					this.onServerRequestGetCodeForCodeReview);
				//aComponentsChat.push( e(Waiting,{ text: 'ChatGPT is reviewing the source code...' }) );
				//aComponentsCode.push( e(Waiting,{ text: 'Loading code...' }) );
				this.state = {
						mode: 'loading'
					};
				//break;
			case 'loading':
				aComponentsChat.push( e(Waiting,{ text: 'ChatGPT is reviewing the source code...' }) );
				aComponentsCode.push( e(Waiting,{ text: 'Loading code...' }) );
			case 'complete':
				aComponentsChat.push( e(ErrorMessage,{ text: 'Fertig!' },null) );
				break;
		}		
		
		var divChat = e('div', {
				float: 'left',
				width: '45%'
			},aComponentsChat);
		var divCode = e('div', {
				float: 'right',
				width: '45%'
			},aComponentsCode);

		
		return e('div',{ width: '100%'},[divChat,divCode]);
		
		//return 'CodeReview: '+ this.props.table + ' ' + this.props.id;
		/*
		return e('button',
			{
				onClick: this.onClick
			},
			'Click me!');
			*/
	}	
}]]></script>
        <source_type>ui_script</source_type>
        <sys_class_name>x_snc_reactor_component</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2023-03-17 13:12:47</sys_created_on>
        <sys_id>67d4f48bdbe5a1506a03dad1f39619d5</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>ChatGPTCodeReview</sys_name>
        <sys_package display_value="ChatGPT WORK IN PROGRESS" source="x_snc_chat_gpt">f68927f3dbd0e1106a03dad1f39619f3</sys_package>
        <sys_policy/>
        <sys_scope display_value="ChatGPT WORK IN PROGRESS">f68927f3dbd0e1106a03dad1f39619f3</sys_scope>
        <sys_update_name>x_snc_reactor_component_67d4f48bdbe5a1506a03dad1f39619d5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2023-03-17 13:47:41</sys_updated_on>
        <type>script</type>
        <ui_script display_value="x_snc_chat_gpt.ChatGPTCodeReview">51b3b80bdbe5a1506a03dad1f3961939</ui_script>
        <url/>
    </x_snc_reactor_component>
</record_update>
